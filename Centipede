/*
* Copyright (c) 2016, Amplified IT
* See the full description at http://labs.amplifiedit.com/centipede
* 
* Support forums are available at  https://amplifiedlabs.zendesk.com/hc/en-us/categories/202956448-Centipede
*
* Published under an MIT License https://opensource.org/licenses/MIT
*
* ********** READ THIS SECTION ****************** 
* Use all lower case for the definitions to ensure the most compatibility for all devices
* Some keyboard emulators do not work properly with upper case or special characters that require modifier key presses
*
* Simply put, if you need to press the shift key to enter any of the information in the lines below, there's a chance it won't work properly

*/

/*
* Do not use any upper case letters here. Chromebook keyboards are emulated differently, and will not work.
* To create CAP letters, must 'press and release' SHIFT in the code below. I.e.  Line: 177
* May also need to adjust number of Tabs to enter wifi configuration See line 157
*/

// Define Your Domain, User, SSID & WiFi password
#define wifi_name "eps-devices" // Define SSID for your wireless connection. Do not use capital letters
//wifi_pass broken into mulitple parts to allow for capitalization "eurekA13"
#define wifi_pass1 "eurek" // part 1
#define wifi_pass2 "a" // CAP part 2
#define wifi_pass3 "13" // part 3

#define wifi_security 2 // Set to 0 for open, 1 for WEP, 2 for WPA
#define username "temp" // Define the user name for enrolling the device. Do not use capital letters
#define domain "teameureka.net" // Set your domain here
#define password "123456789" // The password for the enrollment GAFE account. Do not use capital letters



// Special characters definition
#define KEY_LEFT_CTRL  0x80
#define KEY_LEFT_SHIFT 0x81
#define KEY_LEFT_ALT   0x82
#define KEY_RIGHT_CTRL 0x84
#define KEY_RIGHT_SHIFT    0x85
#define KEY_RIGHT_ALT  0x86
#define KEY_UP_ARROW   0xDA
#define KEY_DOWN_ARROW 0xD9
#define KEY_LEFT_ARROW 0xD8
#define KEY_RIGHT_ARROW    0xD7
#define KEY_BACKSPACE  0xB2
#define KEY_TAB        0xB3
#define KEY_ENTER 0xB0
#define KEY_ESC        0xB1
#define KEY_CAPS_LOCK  0xC1

int buttonPin = 2;  // Set a button to any pin
int RXLED = 17;
static uint8_t __clock_prescaler = (CLKPR & (_BV(CLKPS0) | _BV(CLKPS1) | _BV(CLKPS2) | _BV(CLKPS3)));


void wait(int cycles = 1);

void setup()
{
  setPrescaler();
  Keyboard.begin();
  pinMode(buttonPin, INPUT);  // Set the button as an input
  pinMode(RXLED, OUTPUT);
  digitalWrite(buttonPin, HIGH);
  digitalWrite(RXLED,HIGH);
  wait(8);
}

void loop()
{
	if (digitalRead(buttonPin) == 1	) {
	  wifiConfig();
	  TXLED1;
	  wait(5);
	  while (digitalRead(buttonPin) != 1) {
	  	wait(1);
	  }
	  TXLED0;
	 enterCredentials();
	 showSuccess();
	}
  bootLoop();
}

void bootLoop() {
//      digitalWrite(RXLED, LOW);   // set the LED on
    TXLED1; //TX LED is not tied to a normally controlled pin
    delay(200);              // wait for a second
    TXLED0;
    delay(200);
    TXLED1; //TX LED is not tied to a normally controlled pin
    delay(200);              // wait for a second
    TXLED0;
    delay(800);
}

void showSuccess() {
	digitalWrite(RXLED, HIGH);    // set the LED off
    while (true) {
		bootLoop();
	}
}

void repeatKey(byte key, int num) {
  for (int i = 0; i < num; i++) {
    Keyboard.write(key);
    wait(1);
  }
}

void blink() {
	digitalWrite(RXLED, LOW);
//	TXLED1;
	delay(250);
	digitalWrite(RXLED, HIGH);
//	TXLED0;
	delay(250);
}

void wait(int cycles) {
	for (int i = 0; i < cycles; i++) {
		blink();
	}
}

void enterCredentials() {
  wait(4);
  Keyboard.print(username);
  Keyboard.press(KEY_LEFT_SHIFT);
  Keyboard.write(64);
  Keyboard.release(KEY_LEFT_SHIFT);
  Keyboard.print(domain);
  wait(2);
  Keyboard.write(KEY_ENTER);
  wait(2);
  Keyboard.print(password);
  wait(3);
  Keyboard.write(KEY_ENTER);
  wait(2);
}

//Key sequence to enter Enrollment mode
void enterEnrollment() {
  Keyboard.press(KEY_LEFT_CTRL);
  Keyboard.press(KEY_LEFT_ALT);
  Keyboard.write('e');
  Keyboard.release(KEY_LEFT_ALT);
  Keyboard.release(KEY_LEFT_CTRL);
  wait(1);
}

void wifiConfig() {
  // TABs to enter Wifi Configuration. Change the number below to match if your devices require a different number of tabs to select the wifi configuration
  repeatKey(KEY_TAB, 3);
//  wait(1);
  Keyboard.write(KEY_ENTER);
  // Up arrow 2 times to open other wifi settings
  repeatKey(KEY_UP_ARROW, 2);
  Keyboard.write(KEY_ENTER);
  wait(1);
  // SSID
  Keyboard.print(wifi_name);
  wait(1);
  // TAB
  Keyboard.write(KEY_TAB);
  wait(1);
  if (wifi_security == 0) {
  	repeatKey(KEY_TAB,2);
  } else {
  	repeatKey(KEY_DOWN_ARROW, wifi_security);
  	// TAB
  	Keyboard.write(KEY_TAB);
    wait(1);
  	// type wifi password (entered in three parts to accomplish CAP A in the middle - "eurekA12")
    Keyboard.print(wifi_pass1);
	Keyboard.press(KEY_LEFT_SHIFT);
	Keyboard.print(wifi_pass2);
	Keyboard.release(KEY_LEFT_SHIFT);
	Keyboard.print(wifi_pass3);
	

  }
  wait(1);
  // Enter
  Keyboard.write(KEY_ENTER);
  wait(1);
  // Delay 10 seconds to connect
  wait(25);
  Keyboard.write(KEY_TAB);
  wait(1);
  Keyboard.write(KEY_ENTER);
  wait(2);
  enterEnrollment();
  Keyboard.write(KEY_ENTER);
  wait(1);
}

void setPrescaler() {
	// Disable interrupts.
    uint8_t oldSREG = SREG;
    cli();

    // Enable change.
    CLKPR = _BV(CLKPCE); // write the CLKPCE bit to one and all the other to zero

    // Change clock division.
    CLKPR = 0x0; // write the CLKPS0..3 bits while writing the CLKPE bit to zero

    // Copy for fast access.
    __clock_prescaler = 0x0;

    // Recopy interrupt register.
    SREG = oldSREG;
}
